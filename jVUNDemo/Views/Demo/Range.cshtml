@using jQuery.Validation.Unobtrusive.Native.Demos.Models
@model RangeModel
@section scripts
{
    @Scripts.Render("~/bundles/jquery-validation")
    <script>
        $("form").validate({
            submitHandler: function (form) {
                alert("This is a valid form!");
            }
        });

    </script>
}

<h3>@ViewBag.Title</h3>

<p>The <code>System.ComponentModel.DataAnnotations.RangeAttribute</code> maps to the <a href="http://jqueryvalidation.org/range-method/" target="_blank">range</a> validation method in jQuery Validation.</p>

<ul class="nav nav-tabs" data-tabs="tabs">
    <li class="active"><a data-toggle="tab" href="#demo">Demo</a></li>
    <li><a data-toggle="tab" href="#model">Model</a></li>
    <li><a data-toggle="tab" href="#view">View</a></li>
    <li><a data-toggle="tab" href="#html">HTML</a></li>
    <li><a data-toggle="tab" href="#javascript">JavaScript</a></li>
</ul>
<div class="tab-content">
    <div class="tab-pane active" id="demo">
        @using (Html.BeginForm())
        {
            <div class="row">
                @Html.LabelFor(x => x.Short, "Short - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Short, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.Integer, "Integer - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Integer, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.Long, "Long - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Long, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.Byte, "Byte - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Byte, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.Decimal, "Decimal - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Decimal, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.Single, "Single - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Single, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.Double, "Double - a number between 10 and 20 must be entered:")
                @Html.TextBoxFor(x => x.Double, true)
            </div>

            <div class="row">
                <button type="submit" class="btn btn-default">Submit</button>
                <button type="reset" class="btn btn-info">Reset</button>
            </div>
        }

    </div>

    <div class="tab-pane" id="model">
        
        <p>Here's the model, note that the <code>Range</code> attribute decorates each property of the model enforcing a range of between 10 and 20 (we've used the integer and double convenience overloads for Integer and Double respectively, for other types we're using the overload that takes the type as a parameter):</p>

        <pre class="prettyprint cs">
    using System.ComponentModel.DataAnnotations;

    namespace jQuery.Validation.Unobtrusive.Native.Demos.Models
    {
        public class RangeModel
        {
            [Range(typeof(short), "10", "20")]
            public short Short { get; set; }
            [Range(10, 20)]
            public int Integer { get; set; }
            [Range(typeof(long), "10", "20")]
            public long Long { get; set; }
            [Range(typeof(byte), "10", "20")]
            public byte Byte { get; set; }
            [Range(typeof(decimal), "10", "20")]
            public decimal Decimal { get; set; }
            [Range(typeof(float), "10", "20")]
            public float Single { get; set; }
            [Range(10D, 20D)]
            public double Double { get; set; }
        }
    }
        </pre>
    </div>

    <div class="tab-pane" id="view">
        
        <p>Here's the view (which uses the model):</p>

        <pre class="prettyprint cs">
    @@model jQuery.Validation.Unobtrusive.Native.Demos.Models.RangeModel
    @@using (Html.BeginForm())
    {
        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Short, "Short - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Short, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Integer, "Integer - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Integer, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Long, "Long - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Long, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Byte, "Byte - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Byte, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Decimal, "Decimal - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Decimal, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Single, "Single - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Single, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Double, "Double - a number between 10 and 20 must be entered:")
            @@Html.TextBoxFor(x =&gt; x.Double, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    }
        </pre>

    </div>

    <div class="tab-pane" id="html">
        
        <p>Here's the HTML that the view generates:</p>

        <pre class="prettyprint html">
    &lt;form action="/Home/DemosNumber" method="post"&gt;
        &lt;div class="row"&gt;
            &lt;label for="Short"&gt;Short - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Short must be a number." data-msg-required="The Short field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Short" name="Short" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableShort"&gt;Nullable Short - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableShort must be a number." data-rule-number="true" 
                id="NullableShort" name="NullableShort" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="Integer"&gt;Integer - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Integer must be a number." data-msg-required="The Integer field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Integer" name="Integer" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableInteger"&gt;Nullable Integer - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableInteger must be a number." data-rule-number="true" 
                id="NullableInteger" name="NullableInteger" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="Long"&gt;Long - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Long must be a number." data-msg-required="The Long field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Long" name="Long" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableLong"&gt;Nullable Long - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableLong must be a number." data-rule-number="true"
                id="NullableLong" name="NullableLong" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="Byte"&gt;Byte - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Byte must be a number." data-msg-required="The Byte field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Byte" name="Byte" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableByte"&gt;Nullable Byte - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableByte must be a number." data-rule-number="true"
                id="NullableByte" name="NullableByte" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="Decimal"&gt;Decimal - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Decimal must be a number." data-msg-required="The Decimal field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Decimal" name="Decimal" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableDecimal"&gt;Nullable Decimal - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableDecimal must be a number." data-rule-number="true"
                id="NullableDecimal" name="NullableDecimal" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="Single"&gt;Single - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Single must be a number." data-msg-required="The Single field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Single" name="Single" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableSingle"&gt;Nullable Single - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableSingle must be a number." data-rule-number="true"
                id="NullableSingle" name="NullableSingle" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="Double"&gt;Double - a number between 10 and 20 must be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field Double must be a number." data-msg-required="The Double field is required." 
                data-rule-number="true" data-rule-required="true" 
                id="Double" name="Double" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="NullableDouble"&gt;Nullable Double - only numbers can be entered:&lt;/label&gt;
            &lt;input data-msg-number="The field NullableDouble must be a number." data-rule-number="true"
                id="NullableDouble" name="NullableDouble" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
        </pre>
    </div>
    
    <div class="tab-pane" id="javascript">
        
        <p>Here's the JavaScript that initialises the validation:</p>

        <pre class="prettyprint js">
  $("form").validate({
      submitHandler: function (form) {
          alert("This is a valid form!");
      }
  });
        </pre>

    </div>

</div>

