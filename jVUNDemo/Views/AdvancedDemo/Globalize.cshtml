@using System.Globalization
@using System.Web.Hosting
@using jQuery.Validation.Unobtrusive.Native.Demos.Models
@model GlobalizeModel
@functions{
    /// <summary>
    /// Identifies and returns the default locale to use by mapping as close as possible from ASP.Nets culture to Globalize's locales
    /// </summary>
    /// <returns>The default locale to use for the current culture; eg "de"</returns>
    public string GetDefaultLocale()
    {
        const string localePattern = "~/bower_components/cldr-data/main/{0}"; // where cldr-data lives on disk
        var currentCulture = CultureInfo.CurrentCulture;
        var cultureToUse = "en-GB"; //Default regionalisation to use

        //Try to pick a more appropriate regionalisation
        if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.Name)))) //First try for a en-GB style directory
            cultureToUse = currentCulture.Name;
        else if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.TwoLetterISOLanguageName)))) //That failed; now try for a en style directory
            cultureToUse = currentCulture.TwoLetterISOLanguageName;

        return cultureToUse;
    }
}
@{
    var defaultLocale = GetDefaultLocale();
}
@section metatags{
<meta name="Description" content="A demo of internationalized / locale-specific validation using Globalize.">
}
@section scripts
{
    @Scripts.Render(
        "~/bundles/jquery-validation",
        "~/bower_components/cldrjs/dist/cldr.js",
        "~/bower_components/cldrjs/dist/cldr/event.js",
        "~/bower_components/cldrjs/dist/cldr/supplemental.js",
        "~/bower_components/globalize/dist/globalize.js",
        "~/bower_components/globalize/dist/globalize/number.js",
        "~/bower_components/globalize/dist/globalize/date.js",
        "~/Scripts/jquery.validate.globalize.js")
<script>
    function getJsonFilenames(locale, loadedData) {

        return [
            "supplemental/likelySubtags.json",
            "main/{locale}/numbers.json",
            "supplemental/numberingSystems.json",
            "main/{locale}/ca-gregorian.json",
            "main/{locale}/timeZoneNames.json",
            "supplemental/timeData.json",
            "supplemental/weekData.json",
            "main/{locale}/languages.json"
        ].filter(function (f) {
            var noDataLoaded = loadedData.length === 0;
            if (noDataLoaded) {
                return true;
            }
            var localeNotYetLoaded = loadedData.indexOf(locale) === -1;
            if (localeNotYetLoaded) {
                var fileIsCommonAndSoAlreadyLoaded = f.indexOf("supplemental/" !== -1);
                return fileIsCommonAndSoAlreadyLoaded;
            }
            return false;
        }).map(function (f) { return "../bower_components/cldr-data/" + f.replace("{locale}", locale); });
    }

    function loadLocale(locale, loadedData) {

        var promise = $.Deferred();
        var jsonToLoad = getJsonFilenames(locale, loadedData);
        if (jsonToLoad.length === 0) {
            Globalize.locale(locale); // Presumably already loaded
            promise.resolve(locale + " selected...")
            return promise;
        }

        return $.when.apply(
            this, jsonToLoad.map($.get)
        ).then(function () {
            // Normalize $.get results, we only need the JSON, not the request statuses.
            return [].slice.apply(arguments, [0]).map(function (result) {
                return result[0];
            });
        }).then(Globalize.load).then(function () {
            loadedData.push(locale);
            Globalize.locale(locale);
            return locale + " loaded and selected..."
        });
    }

    var localesLoaded = [];

    $("form").validate({
        submitHandler: function (form) {
            alert("This is a valid form!");
        }
    });

    $("#localeSelector").change(function () {
        var $this = $(this);
        var $exampleFormats = $("#exampleFormats");
        var $loading = $("#loading");

        $this.prop("disabled", true);
        $loading.show();
        $exampleFormats.hide();
        
        var localeToLoad = $this.val();

        loadLocale(localeToLoad, localesLoaded)
            .then(function (result) {
                $this.prop("disabled", false);
                $loading.hide();
                var languageName = Globalize.locale().main('localeDisplayNames/languages/' + localeToLoad);
                languageName = (languageName ? languageName + ': ' : '');
                var exampleFormats = languageName + "A number may look like this: " + Globalize.numberFormatter()(11.7) +
                    " and a date may look like this: " + Globalize.dateFormatter()(new Date());
                $exampleFormats.text(exampleFormats).show();
            }, function (error) {
                $exampleFormats.text("Problem loading locale: " + error).show();
                $this.prop("disabled", false);
                $loading.hide();
            });
    }).change();

    // Show warning if this is a static page
    if (window.location.href.toLowerCase().indexOf("globalize.html") !== -1) {
        $(".static-warning").show();
    }
</script>
}

<h3>@ViewBag.Title</h3>

<p>If you want to patch the jQuery Validation date and number validation to be locale specific then you can using <code><a href="https://github.com/johnnyreilly/jquery-validation-globalize" target="_blank">jquery-validate-globalize.js</a></code>. This demo is not strictly related to jVUN - it's really more about Globalize and jquery-validation-globalize. It's built using jVUN but if you're here strictly for information about jquery-validation-globalize then just ignore the "Model", "View" and "ASP.Net and Globalize" tabs below.  Everything else is just normal JavaScript and jQuery Validation code.</p>

<p>jquery-validation-globalize is available on Bower.  To install it you should first ensure you have a <code>.bowerrc</code> file in place which looks like this:</p>

<pre class="prettyprint js">
{
  "scripts": {
    "preinstall": "npm install cldr-data-downloader@0.2.x",
    "postinstall": "node ./node_modules/cldr-data-downloader/bin/download.js -i bower_components/cldr-data/index.json -o bower_components/cldr-data/"
  }
}
</pre>

<p>Then you can add the package as a dependency of your project with <code>bower install jquery-validation-globalize --save</code>.</p>

<p>To find more information about this then you could have a read of my <a href="http://blog.icanmakethiswork.io/2012/09/globalize-and-jquery-validate.html" target="_blank">blogpost</a>.  This library replaces the jQuery Validation date and number validation with an implementation that depends on <a href="http://github.com/jquery/globalize" target="_blank">Globalize</a>. (By the way, the post relates to when I first created <code><a href="https://github.com/johnnyreilly/jquery-validation-globalize" target="_blank">jquery-validate-globalize.js</a></code> and it depended on Globalize 0.1.x - it has now been migrated to Globalize 1.x which is very different.)  </p>

<p>Take a look at the demo below, do note that you can switch cultures as you wish.</p>

<ul class="nav nav-tabs" data-tabs="tabs">
    <li class="active"><a data-toggle="tab" href="#demo">Demo</a></li>
    <li><a data-toggle="tab" href="#model">Model</a></li>
    <li><a data-toggle="tab" href="#view">View</a></li>
    <li><a data-toggle="tab" href="#html">HTML</a></li>
    <li><a data-toggle="tab" href="#javascript">JavaScript</a></li>
    <li><a data-toggle="tab" href="#locale">ASP.Net and Globalize</a></li>
</ul>
<div class="tab-content">
    <div class="tab-pane active" id="demo">
        @using (Html.BeginForm())
        {
        <div class="row">
            <label for="localeSelector">Current locale:</label>
            <select id="localeSelector">
                @foreach(var localePath in Directory.EnumerateDirectories(HostingEnvironment.MapPath("~/bower_components/cldr-data/main/"))){
                var localeDir = localePath.Substring(localePath.LastIndexOf('\\') + 1);
                <option selected="@(localeDir == defaultLocale)">@localeDir</option>
                }
            </select>
            <span id="exampleFormats"></span>
            <span id="loading">Loading...</span>
        </div>

        <div class="row">
            @Html.LabelFor(x => x.Double, "Double")
            @Html.TextBoxFor(x => x.Double, true)
        </div>

        <div class="row">
            @Html.LabelFor(x => x.DateTime, "DateTime")
            @Html.TextBoxFor(x => x.DateTime, true)
        </div>

        <div class="row">
            <button type="submit" class="btn btn-default">Submit</button>
            <button type="reset" class="btn btn-info">Reset</button>
        </div>
        }

    </div>

    <div class="tab-pane" id="model">

        <p>Here's the model, note that the <code>Range</code> attribute decorates the decimal property and a <code>Required</code> attribute decorates our nullable DateTime.:</p>

        <pre class="prettyprint cs">
    using System.ComponentModel.DataAnnotations;

    namespace jQuery.Validation.Unobtrusive.Native.Demos.Models
    {
        public class GlobalizeModel
        {
            [Range(10.5D, 20.3D)]
            public decimal Double { get; set; }

            [Required]
            public DateTime? DateTime { get; set; }
        }
    }
        </pre>
    </div>

    <div class="tab-pane" id="view">

        <p>Here's the view (which uses the model):</p>

        <pre class="prettyprint cs">
    @@model jQuery.Validation.Unobtrusive.Native.Demos.Models.GlobalizeModel
    @@using (Html.BeginForm())
    {
        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Double, "Double")
            @@Html.TextBoxFor(x =&gt; x.Double, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.DateTime, "DateTime")
            @@Html.TextBoxFor(x =&gt; x.DateTime, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    }
    </pre>

    </div>

    <div class="tab-pane" id="html">

        <p>Here's the HTML that the view generates:</p>

        <pre class="prettyprint html">
    &lt;form action="/AdvancedDemo/Globalize" method="post"&gt;
        &lt;div class="row"&gt;
            &lt;label for="Double"&gt;Double&lt;/label&gt;
            &lt;input data-msg-number="The field Double must be a number." 
                data-msg-range="@string.Format("The field Double must be between {0} and {1}.",10.5D, 20.3D)" 
                data-msg-required="The Double field is required." 
                data-rule-number="true" 
                data-rule-range="[10.5,20.3]" 
                data-rule-required="true" 
                id="Double" name="Double" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="DateTime"&gt;DateTime&lt;/label&gt;
            &lt;input data-msg-date="The field DateTime must be a date." 
                data-msg-required="The DateTime field is required." 
                data-rule-date="true" 
                data-rule-required="true" 
                id="DateTime" name="DateTime" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
        </pre>
    </div>

    <div class="tab-pane" id="javascript">

        <p>Here's an example of the scripts that you might serve up if you wanted to use <code>jquery.validate.globalize.js</code>.  Note that <code>jquery.validate.globalize.js</code> is last as it depends on both <code>jquery.validate.js</code> and <code>globalize.js</code>.</p>

        <pre class="prettyprint html">
    &lt;script src="/Scripts/jquery.validate.js"&gt;&lt;/script&gt;

    &lt;!-- cldr scripts (needed for globalize) --&gt;
    &lt;script src="/bower_components/cldrjs/dist/cldr.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/cldrjs/dist/cldr/event.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/cldrjs/dist/cldr/supplemental.js"&gt;&lt;/script&gt;

    &lt;!-- globalize scripts --&gt;
    &lt;script src="/bower_components/globalize/dist/globalize.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/globalize/dist/globalize/number.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/globalize/dist/globalize/date.js"&gt;&lt;/script&gt;

    &lt;script src="/Scripts/jquery.validate.globalize.js"&gt;&lt;/script&gt;
        </pre>

        <p>Here's the JavaScript that loads the required cldr data via AJAX and initialises the validation - notice it also initialises Globalize to your culture:</p>

        <pre class="prettyprint js">
    $.when(
        $.get("/bower_components/cldr-data/supplemental/likelySubtags.json"),
        $.get("/bower_components/cldr-data/main/@defaultLocale/numbers.json"),
        $.get("/bower_components/cldr-data/supplemental/numberingSystems.json"),
        $.get("/bower_components/cldr-data/main/@defaultLocale/ca-gregorian.json"),
        $.get("/bower_components/cldr-data/main/@defaultLocale/timeZoneNames.json"),
        $.get("/bower_components/cldr-data/supplemental/timeData.json"),
        $.get("/bower_components/cldr-data/supplemental/weekData.json")
    ).then(function () {
        // Normalize $.get results, we only need the JSON, not the request statuses.
        return [].slice.apply(arguments, [0]).map(function (result) {
            return result[0];
        });
    }).then(Globalize.load).then(function () {
        // Initialise Globalize to the current UI culture
        Globalize.locale("@defaultLocale");

        $("form").validate({
            submitHandler: function (form) {
                alert("This is a valid form!");
            }
        });
    });
        </pre>

    </div>
    <div class="tab-pane" id="locale">
        <p>Globalize has locales (eg "en-GB", "de" etc). ASP.Net has cultures (eg "en-GB", "de-DE" etc).  There is not a 1-to-1 relationship between Globalize's locales and ASP.Net's cultures but you can make a good approximation.  How?  Well this simple function will do the job for you:</p>

        <pre class="prettyprint cs">
    /// &lt;summary&gt;
    /// Identifies and returns the default locale to use by mapping as close as possible from ASP.Nets culture to Globalize's locales
    /// &lt;/summary&gt;
    /// &lt;returns&gt;The default locale to use for the current culture; eg "de"&lt;/returns&gt;
    public string GetDefaultLocale()
    {
        const string localePattern = "~/bower_components/cldr-data/main/{0}"; // where cldr-data lives on disk
        var currentCulture = CultureInfo.CurrentCulture;
        var cultureToUse = "en-GB"; //Default regionalisation to use

        //Try to pick a more appropriate regionalisation
        if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.Name)))) //First try for a en-GB style directory
            cultureToUse = currentCulture.Name;
        else if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.TwoLetterISOLanguageName)))) //That failed; now try for a en style directory
            cultureToUse = currentCulture.TwoLetterISOLanguageName;
        return cultureToUse;
    }
                </pre>
        <p>This takes the current culture that ASP.Net is running as and then looks for a Globalize culture that is as close a match as possible (finally falling back to en-GB if it finds nothing suitable).  You can use this to initialise your app to the most appropriate culture for your users. When this is running hosted in ASP.Net that's exactly how this demo page works. This page defaults to the <strong>@defaultLocale</strong> locale - that's right, *<strong>your</strong>* locale (or at least what ASP.Net thinks your locale ought to be).  If you switch your browser to say, <strong>de-DE</strong> and reload this page then you'll see the app has switched to the closest Globalize appropriate locale it can find.</p>

        <div class="alert alert-danger alert-block static-warning" style="display: none;">
            <h4>This demo is being served statically (i.e. not by ASP.Net) and so the default is fixed to the <strong>@defaultLocale</strong> locale</h4>
            <p>Hey people - it looks like you're viewing a static version of this page.  (GitHub pages is all about the static content you see.)   So what I just said about this being customised to your culture by default isn't true.  Sorry about that.  If you want to drive the initial culture from your user settings then try running hosting the jVUNDemo project somewhere.  Then it's all goodness I promise.</p>
        </div>

        <p>Do note that this depends on the following settings in the <code>web.config</code>:</p>
        <pre class="prettyprint xml">
&lt;configuration&gt;
  &lt;system.web&gt;
    &lt;globalization culture="auto" uiCulture="auto" /&gt;
    &lt;!--- Other stuff.... --&gt;
  &lt;/system.web&gt;

  &lt;system.webServer&gt;
    &lt;staticContent&gt;
      &lt;remove fileExtension=".json" /&gt;
      &lt;mimeMap fileExtension=".json" mimeType="application/json" /&gt;
    &lt;/staticContent&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
        </pre>
        <p>The <code>globalization</code> settings activate ASP.Nets auto culture feature. This switches culture per user based on the user's setup - eg German users may be switched to the "de-DE" culture, Brits to "en-GB" etc. The <code>.json</code> setting ensures that the web server is happy to serve up JSON files (which the culture data is stored in). Surprisingly ASP.Net doesn't offer this by default.</p>
    </div>
</div>
