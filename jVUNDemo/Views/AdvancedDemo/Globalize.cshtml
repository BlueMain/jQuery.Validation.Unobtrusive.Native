@using System.Globalization
@using System.Web.Hosting
@using jQuery.Validation.Unobtrusive.Native.Demos.Models
@model GlobalizeModel
@functions{
    // Identifies and returns the culture Globalize should use and it's file path in a KeyValuePair where:
    // Key = culture to use (eg "en-GB")
    // Value = culture file to use (eg "~/scripts/jquery.globalize/cultures/globalize.culture.en-GB.js")
    public KeyValuePair<string, string> GlobalizeCulture()
    { 
        // Determine culture - GUI culture for preference, user selected culture as fallback
        const string filePattern = "~/scripts/globalize/cultures/globalize.culture.{0}.js";
        var currentCulture = CultureInfo.CurrentCulture;
        var cultureToUse = "en-GB"; //Default regionalisation to use
 
        //Try to pick a more appropriate regionalisation
        if (File.Exists(HostingEnvironment.MapPath(string.Format(filePattern, currentCulture.Name)))) //First try for a globalize.culture.en-GB.js style file
            cultureToUse = currentCulture.Name;
        else if (File.Exists(HostingEnvironment.MapPath(string.Format(filePattern, currentCulture.TwoLetterISOLanguageName)))) //That failed; now try for a globalize.culture.en.js style file
            cultureToUse = currentCulture.TwoLetterISOLanguageName;
 
        return new KeyValuePair<string, string>(cultureToUse, string.Format(filePattern, cultureToUse));
    }
}
@{
    var culture = GlobalizeCulture();
}
@section metatags{
    <meta name="Description" content="A demo of internationalized / locale-specific validation using Globalize.">
}
@section scripts
{
    @Scripts.Render(
        "~/bundles/jquery-validation", 
        "~/Scripts/globalize/globalize.js", 
        culture.Value, // eg "~/scripts/jquery.globalize/cultures/globalize.culture.en-GB.js"
        "~/Scripts/jquery.validate.globalize.js")
    <script>
        // Initialise Globalize to the current UI culture
        Globalize.culture("@culture.Key");

        $("form").validate({
            submitHandler: function (form) {
                alert("This is a valid form!");
            }
        });

    </script>
}

<h3>@ViewBag.Title</h3>

<p>If you want to patch the jQuery Validation date and number validation to be locale specific then you can using <code>jquery.validate.globalize.js</code>.  You can download it from Nuget here:</p>

<div class="nuget-badge">
    <p><code>PM&gt; Install-Package jQuery.Validation.Globalize</code></p>
</div>

<p>To find more information about this then you could have a read of my <a href="http://icanmakethiswork.blogspot.com/2012/09/globalize-and-jquery-validate.html" target="_blank">blogpost</a> or look at the project on <a href="https://github.com/johnnyreilly/jquery-validation-globalize" target="_blank">GitHub</a>.  This library replaces the jQuery Validation date and number validation with an implementation that depends on <a href="http://github.com/jquery/globalize" target="_blank">Globalize</a>.</p>

<p>Take a look at the demo below, customised for the <strong>@culture.Key</strong> culture - that's right, *<strong>your</strong>* culture (or at least what ASP.Net thinks your culture ought to be).  If you switch your browser to say, <strong>de-DE</strong> and reload this page then you'll see the app has switched to the closest Globalize appropriate culture it can find.</p>

<ul class="nav nav-tabs" data-tabs="tabs">
    <li class="active"><a data-toggle="tab" href="#demo">Demo</a></li>
    <li><a data-toggle="tab" href="#model">Model</a></li>
    <li><a data-toggle="tab" href="#view">View</a></li>
    <li><a data-toggle="tab" href="#html">HTML</a></li>
    <li><a data-toggle="tab" href="#javascript">JavaScript</a></li>
    <li><a data-toggle="tab" href="#culture">Determine which culture to use</a></li>
</ul>
<div class="tab-content">
    <div class="tab-pane active" id="demo">
        @using (Html.BeginForm())
        {
            <div class="row">
                @Html.LabelFor(x => x.Double, string.Format("Double - a number between {0} and {1} must be entered: ",10.5D, 20.3D))
                @Html.TextBoxFor(x => x.Double, true)
            </div>

            <div class="row">
                @Html.LabelFor(x => x.DateTime, string.Format("DateTime - example date string: {0:d}, example date and time string: {0:f}:", DateTime.Today))
                @Html.TextBoxFor(x => x.DateTime, true)
            </div>

            <div class="row">
                <button type="submit" class="btn btn-default">Submit</button>
                <button type="reset" class="btn btn-info">Reset</button>
            </div>
        }

    </div>

    <div class="tab-pane" id="model">
        
        <p>Here's the model, note that the <code>Range</code> attribute decorates the decimal property and a <code>Required</code> attribute decorates our nullable DateTime.:</p>

        <pre class="prettyprint cs">
    using System.ComponentModel.DataAnnotations;

    namespace jQuery.Validation.Unobtrusive.Native.Demos.Models
    {
        public class GlobalizeModel
        {
            [Range(10.5D, 20.3D)]
            public decimal Double { get; set; }

            [Required]
            public DateTime? DateTime { get; set; }
        }
    }
        </pre>
    </div>

    <div class="tab-pane" id="view">
        
        <p>Here's the view (which uses the model):</p>

        <pre class="prettyprint cs">
    @@model jQuery.Validation.Unobtrusive.Native.Demos.Models.GlobalizeModel
    @@using (Html.BeginForm())
    {
        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Double, string.Format("Double - a number between {0} and {1} must be entered: ",10.5D, 20.3D))
            @@Html.TextBoxFor(x =&gt; x.Double, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.DateTime, string.Format("DateTime - example date string: {0:d}, example date and time string: {0:f}:", DateTime.Today))
            @@Html.TextBoxFor(x =&gt; x.DateTime, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    }
        </pre>

    </div>

    <div class="tab-pane" id="html">
        
        <p>Here's the HTML that the view generates:</p>

        <pre class="prettyprint html">
    &lt;form action="/AdvancedDemo/Globalize" method="post"&gt;
        &lt;div class="row"&gt;
            &lt;label for="Double"&gt;@string.Format("Double - a number between {0} and {1} must be entered: ",10.5D, 20.3D)&lt;/label&gt;
            &lt;input data-msg-number="The field Double must be a number." 
                data-msg-range="@string.Format("The field Double must be between {0} and {1}.",10.5D, 20.3D)" 
                data-msg-required="The Double field is required." 
                data-rule-number="true" 
                data-rule-range="[10.5,20.3]" 
                data-rule-required="true" 
                id="Double" name="Double" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="DateTime"&gt;@string.Format("DateTime - example date string: {0:d}, example date and time string: {0:f}:", DateTime.Today)&lt;/label&gt;
            &lt;input data-msg-date="The field DateTime must be a date." 
                data-msg-required="The DateTime field is required." 
                data-rule-date="true" 
                data-rule-required="true" 
                id="DateTime" name="DateTime" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
        </pre>
    </div>
    
    <div class="tab-pane" id="javascript">
        
        <p>Here's an example of the scripts that you might serve up if you wanted to use <code>jquery.validate.globalize.js</code>.  Note that <code>jquery.validate.globalize.js</code> is last as it depends on both <code>jquery.validate.js</code> and <code>globalize.js</code>.</p>

        <pre class="prettyprint html">
  &lt;script src="/Scripts/jquery.validate.js"&gt;&lt;/script&gt;
  &lt;script src="/Scripts/jquery.globalize/globalize.js"&gt;&lt;/script&gt;
  &lt;script src="/scripts/jquery.globalize/cultures/globalize.culture.en-GB.js"&gt;&lt;/script&gt;
  &lt;script src="/Scripts/jquery.validate.globalize.js"&gt;&lt;/script&gt;
        </pre>

        <p>Here's the JavaScript that initialises the validation - notice it also initialises Globalize to your culture:</p>

        <pre class="prettyprint js">
  // Initialise Globalize to the current UI culture (you need to have served up the relevant culture file for this to work)
  Globalize.culture("@culture.Key");

  $("form").validate({
      submitHandler: function (form) {
          alert("This is a valid form!");
      }
  });
        </pre>

    </div>
     
    <div class="tab-pane" id="culture">
        
        <p>You may wonder how this page is determining which culture to use.  Well it's using this function here:</p>

        <pre class="prettyprint cs">
    // Identifies and returns the culture Globalize should use and it's file path in a KeyValuePair where:
    // Key = culture to use (eg "en-GB")
    // Value = culture file to use (eg "~/scripts/jquery.globalize/cultures/globalize.culture.en-GB.js")
    public KeyValuePair&lt;string, string&gt; GlobalizeCulture()
    { 
        // Determine culture - GUI culture for preference, user selected culture as fallback
        const string filePattern = "~/scripts/jquery.globalize/cultures/globalize.culture.{0}.js";
        var currentCulture = CultureInfo.CurrentCulture;
        var cultureToUse = "en-GB"; //Default regionalisation to use
 
        //Try to pick a more appropriate regionalisation
        if (File.Exists(HostingEnvironment.MapPath(string.Format(filePattern, currentCulture.Name)))) //First try for a globalize.culture.en-GB.js style file
            cultureToUse = currentCulture.Name;
        else if (File.Exists(HostingEnvironment.MapPath(string.Format(filePattern, currentCulture.TwoLetterISOLanguageName)))) //That failed; now try for a globalize.culture.en.js style file
            cultureToUse = currentCulture.TwoLetterISOLanguageName;
 
        return new KeyValuePair&lt;string, string&gt;(cultureToUse, string.Format(filePattern, cultureToUse));
    }        
        </pre>
        
        <p>This takes the current culture that ASP.Net believes you are running as and then looks for a Globalize culture that is a close match (finally falling back to en-GB if it finds nothing suitable). Do note that this depends on the following setting in the <code>web.config</code>:</p>
        
        <pre class="prettyprint xml">
&lt;configuration&gt;
  &lt;system.web&gt;
    &lt;globalization culture="auto" uiCulture="auto" /&gt;
    &lt;!--- Other stuff.... --&gt;
  &lt;/system.web&gt;
&lt;/configuration&gt;

        </pre>
        
        <p>The Key returned from the function is the Globalize culture you are going to use (eg "<strong>@culture.Key</strong>") which you can use to initialise Globalize to the relevant culture.  The Value returned is the Globalize culture file you are going to use (eg <strong>"@culture.Value</strong>") which you can use to serve up that culture file.  These 2 combined allows you to do something like this:</p>
        
        <pre class="prettyprint html">
    @@{
        var culture = GlobalizeCulture();
    }

    @@Scripts.Render(
        "~/bundles/jquery-validation", 
        "~/Scripts/jquery.globalize/globalize.js", 
        culture.Value, // eg "~/scripts/jquery.globalize/cultures/globalize.culture.en-GB.js"
        "~/Scripts/jquery.validate.globalize.js")

    &lt;script&gt;
        // Initialise Globalize to the current UI culture
        Globalize.culture("@@culture.Key"); // eg "en-GB"

        // ....

    &lt;/script&gt;

        </pre>
    </div>

</div>

