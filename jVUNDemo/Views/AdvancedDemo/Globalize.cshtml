@using System.Globalization
@using System.Web.Hosting
@using jQuery.Validation.Unobtrusive.Native.Demos.Models
@model GlobalizeModel
@functions{
    // Identifies and returns the culture Globalize should use and it's file path in a KeyValuePair where:
    // Key = culture to use (eg "en-GB")
    // Value = culture files to use (eg "/bower_components/cldr-data/main/en-GB/numbers.json")
    public KeyValuePair<string, string[]> GetLocaleAndCldrData()
    {
    // Determine culture - GUI culture for preference, user selected culture as fallback
    const string localePattern = "~/bower_components/cldr-data/main/{0}";
    var currentCulture = CultureInfo.CurrentCulture;
    var cultureToUse = "en-GB"; //Default regionalisation to use

    //Try to pick a more appropriate regionalisation
    if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.Name)))) //First try for a en-GB style directory
        cultureToUse = currentCulture.Name;
    else if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.TwoLetterISOLanguageName)))) //That failed; now try for a en style directory
        cultureToUse = currentCulture.TwoLetterISOLanguageName;

    const string directoryPattern = "../../bower_components/cldr-data/{0}";
    var cultureFilesToUse = new[] {
        "supplemental/likelySubtags.json",
        string.Format("main/{0}/numbers.json", cultureToUse),
        "supplemental/numberingSystems.json",
        string.Format("main/{0}/ca-gregorian.json", cultureToUse),
        string.Format("main/{0}/timeZoneNames.json", cultureToUse),
        "supplemental/timeData.json",
        "supplemental/weekData.json"
    }.Select(f => string.Format(directoryPattern, f)).ToArray();

    return new KeyValuePair<string, string[]>(cultureToUse, cultureFilesToUse);
    }
}
@{
    var localeAndCldrData = GetLocaleAndCldrData();
}
@section metatags{
    <meta name="Description" content="A demo of internationalized / locale-specific validation using Globalize.">
}
@section scripts
{
    @Scripts.Render(
        "~/bundles/jquery-validation",
        "~/bower_components/cldrjs/dist/cldr.js",
        "~/bower_components/cldrjs/dist/cldr/event.js",
        "~/bower_components/cldrjs/dist/cldr/supplemental.js",
        "~/bower_components/globalize/dist/globalize.js",
        "~/bower_components/globalize/dist/globalize/number.js",
        "~/bower_components/globalize/dist/globalize/date.js",
        "~/Scripts/jquery.validate.globalize.js")
    <script>
            $.when(
                @Html.Raw(string.Join(",\r\n", localeAndCldrData.Value.Select(c => "$.get(\"" + c + "\")")))
            ).then(function () {

                // Normalize $.get results, we only need the JSON, not the request statuses.
                return [].slice.apply(arguments, [0]).map(function (result) {
                    return result[0];
                });

            }).then(Globalize.load).then(function () {

                // Initialise Globalize to the current UI culture
                Globalize.locale("@localeAndCldrData.Key");

                $("form").validate({
                    submitHandler: function (form) {
                        alert("This is a valid form!");
                    }
                });

            });

            // Show warning if this is a static page
            if (window.location.href.toLowerCase().indexOf("globalize.html") !== -1) {
                $("#warning").slideDown();
            }
    </script>
}

<h3>@ViewBag.Title</h3>

<p>If you want to patch the jQuery Validation date and number validation to be locale specific then you can using <code><a href="https://github.com/johnnyreilly/jquery-validation-globalize" target="_blank">jquery-validate-globalize.js</a></code>. This is available on Bower.  To install it you should first ensure you have a <code>.bowerrc</code> file in place which looks like this:</p>

<pre class="prettyprint js">
{
  "scripts": {
    "preinstall": "npm install cldr-data-downloader@0.2.x",
    "postinstall": "node ./node_modules/cldr-data-downloader/bin/download.js -i bower_components/cldr-data/index.json -o bower_components/cldr-data/"
  }
}
</pre>

<p>Then you can add the package as a dependency of your project with <code>bower install jquery-validation-globalize --save</code>.</p>

<p>To find more information about this then you could have a read of my <a href="http://blog.icanmakethiswork.io/2012/09/globalize-and-jquery-validate.html" target="_blank">blogpost</a>.  This library replaces the jQuery Validation date and number validation with an implementation that depends on <a href="http://github.com/jquery/globalize" target="_blank">Globalize</a>. (By the way, the post relates to when I first created <code><a href="https://github.com/johnnyreilly/jquery-validation-globalize" target="_blank">jquery-validate-globalize.js</a></code> and it depended on Globalize 0.1.x - it has now been migrated to Globalize 1.x which is very different.)  </p>

<p>Take a look at the demo below, customised for the <strong>@localeAndCldrData.Key</strong> locale - that's right, *<strong>your</strong>* locale (or at least what ASP.Net thinks your locale ought to be).  If you switch your browser to say, <strong>de-DE</strong> and reload this page then you'll see the app has switched to the closest Globalize appropriate locale it can find.</p>
<div class="alert alert-danger alert-block" style="display: none;" id="warning">
    <h4>This demo is fixed to the current locale</h4>
    <p>Hey people - it looks like you're viewing a static version of this page.  (GitHub pages is all about the static content you see.)  If you want to switch cultures as suggested above then try running the jVUNDemo project locally.  Then it's all goodness I promise.</p>
</div>

<ul class="nav nav-tabs" data-tabs="tabs">
    <li class="active"><a data-toggle="tab" href="#demo">Demo</a></li>
    <li><a data-toggle="tab" href="#model">Model</a></li>
    <li><a data-toggle="tab" href="#view">View</a></li>
    <li><a data-toggle="tab" href="#html">HTML</a></li>
    <li><a data-toggle="tab" href="#javascript">JavaScript</a></li>
    <li><a data-toggle="tab" href="#locale">Determine which locale to use</a></li>
</ul>
<div class="tab-content">
    <div class="tab-pane active" id="demo">
        @using (Html.BeginForm())
        {
        <div class="row">
            @Html.LabelFor(x => x.Double, string.Format("Double - a number between {0} and {1} must be entered: ",10.5D, 20.3D))
            @Html.TextBoxFor(x => x.Double, true)
        </div>

        <div class="row">
            @Html.LabelFor(x => x.DateTime, string.Format("DateTime - example date string: {0:d}:", DateTime.Today))
            @Html.TextBoxFor(x => x.DateTime, true)
        </div>

        <div class="row">
            <button type="submit" class="btn btn-default">Submit</button>
            <button type="reset" class="btn btn-info">Reset</button>
        </div>
        }

    </div>

    <div class="tab-pane" id="model">

        <p>Here's the model, note that the <code>Range</code> attribute decorates the decimal property and a <code>Required</code> attribute decorates our nullable DateTime.:</p>

        <pre class="prettyprint cs">
    using System.ComponentModel.DataAnnotations;

    namespace jQuery.Validation.Unobtrusive.Native.Demos.Models
    {
        public class GlobalizeModel
        {
            [Range(10.5D, 20.3D)]
            public decimal Double { get; set; }

            [Required]
            public DateTime? DateTime { get; set; }
        }
    }
        </pre>
    </div>

    <div class="tab-pane" id="view">

        <p>Here's the view (which uses the model):</p>

        <pre class="prettyprint cs">
    @@model jQuery.Validation.Unobtrusive.Native.Demos.Models.GlobalizeModel
    @@using (Html.BeginForm())
    {
        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.Double, string.Format("Double - a number between {0} and {1} must be entered: ",10.5D, 20.3D))
            @@Html.TextBoxFor(x =&gt; x.Double, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            @@Html.LabelFor(x =&gt; x.DateTime, string.Format("DateTime - example date string: {0:d}", DateTime.Today))
            @@Html.TextBoxFor(x =&gt; x.DateTime, true)
        &lt;/div&gt;

        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    }
    </pre>

    </div>

    <div class="tab-pane" id="html">

        <p>Here's the HTML that the view generates:</p>

            <pre class="prettyprint html">
    &lt;form action="/AdvancedDemo/Globalize" method="post"&gt;
        &lt;div class="row"&gt;
            &lt;label for="Double"&gt;@string.Format("Double - a number between {0} and {1} must be entered: ",10.5D, 20.3D)&lt;/label&gt;
            &lt;input data-msg-number="The field Double must be a number." 
                data-msg-range="@string.Format("The field Double must be between {0} and {1}.",10.5D, 20.3D)" 
                data-msg-required="The Double field is required." 
                data-rule-number="true" 
                data-rule-range="[10.5,20.3]" 
                data-rule-required="true" 
                id="Double" name="Double" type="text" value="0" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;label for="DateTime"&gt;@string.Format("DateTime - example date string: {0:d}, example date and time string: {0:f}:", DateTime.Today)&lt;/label&gt;
            &lt;input data-msg-date="The field DateTime must be a date." 
                data-msg-required="The DateTime field is required." 
                data-rule-date="true" 
                data-rule-required="true" 
                id="DateTime" name="DateTime" type="text" value="" /&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
            &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
            &lt;button type="reset" class="btn btn-info"&gt;Reset&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
        </pre>
    </div>

    <div class="tab-pane" id="javascript">

        <p>Here's an example of the scripts that you might serve up if you wanted to use <code>jquery.validate.globalize.js</code>.  Note that <code>jquery.validate.globalize.js</code> is last as it depends on both <code>jquery.validate.js</code> and <code>globalize.js</code>.</p>

        <pre class="prettyprint html">
    &lt;script src="/Scripts/jquery.validate.js"&gt;&lt;/script&gt;

    &lt;!-- cldr scripts (needed for globalize) --&gt;
    &lt;script src="/bower_components/cldrjs/dist/cldr.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/cldrjs/dist/cldr/event.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/cldrjs/dist/cldr/supplemental.js"&gt;&lt;/script&gt;

    &lt;!-- globalize scripts --&gt;
    &lt;script src="/bower_components/globalize/dist/globalize.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/globalize/dist/globalize/number.js"&gt;&lt;/script&gt;
    &lt;script src="/bower_components/globalize/dist/globalize/date.js"&gt;&lt;/script&gt;

    &lt;script src="/Scripts/jquery.validate.globalize.js"&gt;&lt;/script&gt;
        </pre>

        <p>Here's the JavaScript that loads the required cldr data via AJAX and initialises the validation - notice it also initialises Globalize to your culture:</p>

        <pre class="prettyprint js">
    $.when(
        $.get("/bower_components/cldr-data/supplemental/likelySubtags.json"),
        $.get("/bower_components/cldr-data/main/@localeAndCldrData.Key/numbers.json"),
        $.get("/bower_components/cldr-data/supplemental/numberingSystems.json"),
        $.get("/bower_components/cldr-data/main/@localeAndCldrData.Key/ca-gregorian.json"),
        $.get("/bower_components/cldr-data/main/@localeAndCldrData.Key/timeZoneNames.json"),
        $.get("/bower_components/cldr-data/supplemental/timeData.json"),
        $.get("/bower_components/cldr-data/supplemental/weekData.json")
    ).then(function () {
        // Normalize $.get results, we only need the JSON, not the request statuses.
        return [].slice.apply(arguments, [0]).map(function (result) {
            return result[0];
        });
    }).then(Globalize.load).then(function () {
        // Initialise Globalize to the current UI culture
        Globalize.locale("@localeAndCldrData.Key");

        $("form").validate({
            submitHandler: function (form) {
                alert("This is a valid form!");
            }
        });
    });
        </pre>

    </div>
    <div class="tab-pane" id="locale">
        <p>You may wonder how this page is determining which locale to use.  Well it's using this function here:</p>

        <pre class="prettyprint cs">
    // Identifies and returns the culture Globalize should use and it's file path in a KeyValuePair where:
    // Key = culture to use (eg "en-GB")
    // Value = culture files to use (eg "/bower_components/cldr-data/main/en-GB/numbers.json")
    public KeyValuePair&lt;string, string[]&gt;GetLocaleAndCldrData()
    {
        // Determine culture - GUI culture for preference, user selected culture as fallback
        const string localePattern = "~/bower_components/cldr-data/main/{0}";

        var currentCulture = CultureInfo.CurrentCulture;
        var cultureToUse = "en-GB"; //Default regionalisation to use

        //Try to pick a more appropriate regionalisation
        if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.Name)))) //First try for a en-GB style directory
        cultureToUse = currentCulture.Name;
        else if (Directory.Exists(HostingEnvironment.MapPath(string.Format(localePattern, currentCulture.TwoLetterISOLanguageName)))) //That failed; now try for a en style directory
        cultureToUse = currentCulture.TwoLetterISOLanguageName;

        const string directoryPattern = "../../bower_components/cldr-data/{0}";
        var cultureFilesToUse = new[] {
            "supplemental/likelySubtags.json",
            string.Format("main/{0}/numbers.json", cultureToUse),
            "supplemental/numberingSystems.json",
            string.Format("main/{0}/ca-gregorian.json", cultureToUse),
            string.Format("main/{0}/timeZoneNames.json", cultureToUse),
            "supplemental/timeData.json",
            "supplemental/weekData.json"
        }.Select(f =&gt; string.Format(directoryPattern, f)).ToArray();

        return new KeyValuePair&lt;string, string[]&gt;(cultureToUse, cultureFilesToUse);
    }
                </pre>
                <p>This takes the current culture that ASP.Net believes you are running as and then looks for a Globalize culture that is a close match (finally falling back to en-GB if it finds nothing suitable). Do note that this depends on the following setting in the <code>web.config</code>:</p>
                <pre class="prettyprint xml">
&lt;configuration&gt;
  &lt;system.web&gt;
    &lt;globalization culture="auto" uiCulture="auto" /&gt;
    &lt;!--- Other stuff.... --&gt;
  &lt;/system.web&gt;

  &lt;system.webServer&gt;
    &lt;staticContent&gt;
      &lt;remove fileExtension=".json" /&gt;
      &lt;mimeMap fileExtension=".json" mimeType="application/json" /&gt;
    &lt;/staticContent&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
        </pre>
                <p>The Key returned from the function is the Globalize culture you are going to use (eg <em>"@localeAndCldrData.Key"</em>) which you can use to initialise Globalize to the relevant culture.  The Value returned is an array of the cldr locale data files you are going to use to power Globalize (eg <em>"@string.Join("\", \"", localeAndCldrData.Value)"</em>) which you can use to serve up that culture file.  These 2 combined allows you to do something like this:</p>
                <pre class="prettyprint html">
    @@{
        var localeAndCldrData = GetLocaleAndCldrData();
    }
    @@Scripts.Render(
        "~/bundles/jquery-validation",
        "~/bower_components/cldrjs/dist/cldr.js",
        "~/bower_components/cldrjs/dist/cldr/event.js",
        "~/bower_components/cldrjs/dist/cldr/supplemental.js",
        "~/bower_components/globalize/dist/globalize.js",
        "~/bower_components/globalize/dist/globalize/number.js",
        "~/bower_components/globalize/dist/globalize/date.js",
        "~/Scripts/jquery.validate.globalize.js")
    &lt;script&gt;
        $.when(
            @@Html.Raw(string.Join(",\r\n", localeAndCldrData.Value.Select(c => "$.get(\"" + c + "\")")))
        ).then(function () {
            // Normalize $.get results, we only need the JSON, not the request statuses.
            return [].slice.apply(arguments, [0]).map(function (result) {
                return result[0];
            });
        }).then(Globalize.load).then(function () {
            // Initialise Globalize to the current UI culture
            Globalize.locale("@@localeAndCldrData.Key");
            $("form").validate({
                submitHandler: function (form) {
                    alert("This is a valid form!");
                }
            });
        });
    &lt;/script&gt;
        </pre>
                <p>This may well not be the best way to do this... But this is a way.</p>
            </div>
        </div>
